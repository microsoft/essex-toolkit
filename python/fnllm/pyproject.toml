[project]
name = "fnllm"
version = "0.0.12"
description = "A function-based LLM protocol and wrapper."
authors = [
    {name="Chris Trevino", email="chtrevin@microsoft.com"},
    {name="Rodrigo Racanicci", email="rracanicci@microsoft.com"}
]
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "aiolimiter>=1.1.0",
    "tenacity>=8.5.0",
    "pydantic>=2.8.2",
    "httpx>=0.27.0",
    "json-repair>=0.30.0",
]
[project.optional-dependencies]
openai=[
    "openai>=1.35.12",
    "tiktoken>=0.7.0"
]
azure=[
    "azure-identity>=1.17.1",
    "azure-storage-blob>=12.20.0"
]

[tool.uv]
dev-dependencies = [
    "ruff>=0.6.8",
    "pyright>=1.1.379",
    "pytest>=8.2.2",
    "coverage>=7.5.4",
    "poethepoet>=0.27.0",
    "pytest-asyncio>=0.23.7",
    "ipykernel>=6.29.5",
    "hatchling>=1.25.0",
    # OpenAI Optional
    "openai>=1.53.0",
    "tiktoken>=0.8.0",
    # Azure Optional
    "azure-identity>=1.17.1",
    "azure-storage-blob>=12.20.0"
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[tool.poe.tasks]
_sort_imports = "ruff check --select I --fix . --preview"
_ruff_check = 'ruff check . --preview'
_format_code = "ruff format  . --preview"
_format_check = 'ruff format . --check --preview'

typecheck = "pyright"
check_package_types = "pyright --verifytypes fnllm --ignoreexternal"
check = ['_format_check', '_ruff_check', 'typecheck', 'check_package_types']
fix = "ruff check --preview --fix ."
fix_unsafe = "ruff check --preview --fix --unsafe-fixes ."
format = ['_sort_imports', '_format_code']
test = "pytest tests"

_test_with_coverage = 'coverage run --source=fnllm -m pytest tests/unit'
_coverage_report = 'coverage report --fail-under=100 --show-missing --omit="fnllm/services/decorator.py,fnllm/types/protocol.py,fnllm/openai/types/client.py"'
_generate_coverage_xml = 'coverage xml --omit="fnllm/services/decorator.py"'
_generate_coverage_html = 'coverage html --omit="fnllm/services/decorator.py"'
test_coverage = [
    '_test_with_coverage',
    '_generate_coverage_xml',
    '_generate_coverage_html',
    '_coverage_report',
]
test_only = "pytest -v -k"

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
asyncio_mode = "auto"
