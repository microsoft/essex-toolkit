[tool.poetry]
name = "fnllm"
version = "0.0.2"
description = "A function-based LLM protocol and wrapper."
authors = [
    "Chris Trevino <chtrevin@microsoft.com>",
    "Rodrigo Racanicci <rracanicci@microsoft.com>",
]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
aiolimiter = "^1.1.0"
tenacity = "^8.5.0"
pydantic = "^2.8.2"
tiktoken = { version = "^0.7.0", optional = true }
openai = { version = "^1.35.12", optional = true }
azure-identity = { version = "^1.17.1", optional = true }
azure-storage-blob = { version = "^12.20.0", optional = true }
httpx = "^0.27.0"

[tool.poetry.extras]
azure = ["azure-identity", "azure-storage-blob"]
openai = ["openai", "tiktoken"]

[tool.poetry.group.dev.dependencies]
ruff = "^0.5.1"
pyright = "^1.1.370"
pytest = "^8.2.2"
coverage = "^7.5.4"
poethepoet = "^0.27.0"
pytest-asyncio = "^0.23.7"
ipykernel = "^6.29.5"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poe.tasks]
_sort_imports = "ruff check --select I --fix . --preview"
_ruff_check = 'ruff check . --preview'
_format_code = "ruff format  . --preview"
_format_check = 'ruff format . --check --preview'

typecheck = "pyright"
check_package_types = "pyright --verifytypes fnllm --ignoreexternal"
check = ['_format_check', '_ruff_check', 'typecheck', 'check_package_types']
fix = "ruff check --preview --fix ."
fix_unsafe = "ruff check --preview --fix --unsafe-fixes ."
format = ['_sort_imports', '_format_code']
test = "pytest tests"

_test_with_coverage = 'coverage run --source=fnllm -m pytest tests/unit'
_coverage_report = 'coverage report --fail-under=100 --show-missing --omit="fnllm/services/decorator.py"'
_generate_coverage_xml = 'coverage xml --omit="fnllm/services/decorator.py"'
_generate_coverage_html = 'coverage html --omit="fnllm/services/decorator.py"'
test_coverage = [
    '_test_with_coverage',
    '_generate_coverage_xml',
    '_generate_coverage_html',
    '_coverage_report',
]
test_only = "pytest -v -k"

[tool.ruff]
target-version = "py310"
extend-include = ["*.ipynb"]

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 20

[tool.ruff.lint]
select = [
    "E4",
    "E7",
    "E9",
    "W291",
    "YTT",
    "T10",
    "ICN",
    "INP",
    "Q",
    "RSE",
    "SLOT",
    "INT",
    "FLY",
    "LOG",
    "C90",
    "T20",
    "D",
    "RET",
    "PD",
    "N",
    "PIE",
    "SIM",
    "S",
    "G",
    "ERA",
    "ASYNC",
    "TID",
    "UP",
    "SLF",
    "BLE",
    "C4",
    "I",
    "F",
    "A",
    "ARG",
    "PTH",
    "RUF",
    "B",
    "TCH",
    "DTZ",
    "PYI",
    "PT",
    "EM",
    "TRY",
    "PERF",
    "CPY",
    # "FBT", # use named arguments for boolean flags
    # "TD", # todos
    # "FIX", # fixme
    # "FURB" # preview rules
    # ANN # Type annotations, re-enable when we get bandwidth
]
ignore = [
    # Deprecated Rules
    "ANN101",
    "ANN102",
    # Conflicts with interface argument checking
    "ARG002",
    "ANN204",
    "C901",
    # Shadowing built in modules
    "A005",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S",
    "D",
    "ANN",
    "T201",
    "ASYNC",
    "ARG",
    "PTH",
    "TRY",
    "PT001",
    "SLF001",
]
"examples/*" = ["S", "D", "ANN", "T201", "PTH", "TRY", "PERF"]
"*.ipynb" = ["T201"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
asyncio_mode = "auto"
