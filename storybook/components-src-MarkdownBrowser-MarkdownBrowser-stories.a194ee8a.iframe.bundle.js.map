{"version":3,"file":"components-src-MarkdownBrowser-MarkdownBrowser-stories.a194ee8a.iframe.bundle.js","mappings":";;;;;AAgBA;;AAIA;;;;;;;AAOA;;;;AAKA;;;;;;;;;;;;AAaA;;;;;ACHA","sources":["webpack://essex-toolkit-stories/../components/src/MarkdownBrowser/MarkdownBrowser.styles.ts","webpack://essex-toolkit-stories/../components/src/MarkdownBrowser/MarkdownBrowser.hooks.ts"],"sourcesContent":["/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { ITheme } from '@fluentui/react'\nimport { useTheme } from '@fluentui/react'\nimport Markdown from 'markdown-to-jsx'\nimport { useMemo } from 'react'\nimport styled from 'styled-components'\n\nexport const Container = styled.div`\n    overflow-y: auto;\n    height: 100%;\n    width: 100%;\n`\n\nexport const Navigation = styled.div`\n    float: right;\n`\n\nexport const MarkdownContainer = styled(Markdown)<{ theme: ITheme }>`\n    *:first-child {\n        margin-top: 0;\n    }\n    \n    h1 {\n        text-transform: uppercase;\n        color: ${({ theme }: { theme: ITheme }) =>\n\t\t\t\t\ttheme.palette.neutralTertiary};\n    }\n\n    h2 {\n        color: ${({ theme }: { theme: ITheme }) =>\n\t\t\t\t\ttheme.palette.neutralTertiary};\n    }\n\n    table {\n        border-collapse: collapse;\n\n        th {\n            font-weight: bold;\n        }\n\n        td,\n        th {\n            border: 1px solid ${({ theme }: { theme: ITheme }) =>\n\t\t\t\t\t\t\ttheme.palette.neutralTertiaryAlt};\n            padding: 5px;\n            text-align: center;\n        }\n    }\n`\n\nexport function useIconButtonStyles() {\n\tconst theme = useTheme()\n\treturn useMemo(\n\t\t() => ({\n\t\t\troot: {\n\t\t\t\tcolor: theme.palette.neutralPrimaryAlt,\n\t\t\t},\n\t\t\trootDisabled: {\n\t\t\t\tbackgroundColor: 'none',\n\t\t\t},\n\t\t}),\n\t\t[theme],\n\t)\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { IButtonProps } from '@fluentui/react'\nimport merge from 'lodash-es/merge.js'\nimport type React from 'react'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\n\nimport { useIconButtonStyles } from './MarkdownBrowser.styles.js'\n\nexport function useHistory(home?: string): {\n\tcurrent: string | undefined\n\tgoHome?: () => void\n\tgoBack?: () => void\n\tgoForward: (to: string) => void\n} {\n\tconst [stack, setStack] = useState<string[]>([])\n\t// reset the stack and go to the original\n\tconst goHome = useCallback(() => setStack(home ? [home] : []), [home])\n\tconst goBack = useCallback(\n\t\t() => setStack((prev) => (prev.length > 1 ? prev.slice(0, -1) : prev)),\n\t\t[],\n\t)\n\tconst goForward = useCallback(\n\t\t(to: string) => setStack((prev) => [...prev, to]),\n\t\t[],\n\t)\n\tuseEffect(() => setStack(home ? [home] : []), [home])\n\treturn {\n\t\tcurrent: stack[stack.length - 1],\n\t\tgoHome: stack.length > 1 ? goHome : undefined,\n\t\tgoBack: stack.length > 1 ? goBack : undefined,\n\t\tgoForward,\n\t}\n}\n\n/**\n * Override link click behavior to intercept relative links.\n * @param container\n * @param goForward\n * @param current\n */\nexport function useLinkNavigation(\n\tparent: string,\n\thref: string,\n\tgoForward: (to: string) => void,\n) {\n\treturn useCallback(\n\t\t(\n\t\t\tevent: React.MouseEvent<\n\t\t\t\tHTMLAnchorElement | HTMLButtonElement | HTMLElement\n\t\t\t>,\n\t\t) => {\n\t\t\tevent.preventDefault()\n\t\t\t// if the link is not relative, open in a new window\n\t\t\tif (isExternalLink(href)) {\n\t\t\t\treturn window.open(href, '_blank')\n\t\t\t}\n\t\t\t// otherwise, navigate to the relative link\n\t\t\tconst name = parseRelativePath(href, parent)\n\t\t\tif (name) {\n\t\t\t\tgoForward(name)\n\t\t\t}\n\t\t},\n\t\t[parent, href, goForward],\n\t)\n}\n\nexport function useIconButtonProps(\n\ticonName: string,\n\tonClick?: any,\n\toverrides?: IButtonProps,\n): IButtonProps {\n\tconst styles = useIconButtonStyles()\n\treturn useMemo(() => {\n\t\treturn merge(\n\t\t\t{\n\t\t\t\tdisabled: !onClick,\n\t\t\t\tstyles,\n\t\t\t\ticonProps: {\n\t\t\t\t\ticonName,\n\t\t\t\t},\n\t\t\t\tariaLabel: iconName,\n\t\t\t\tonClick,\n\t\t\t},\n\t\t\toverrides,\n\t\t)\n\t}, [styles, iconName, onClick, overrides])\n}\n\n/**\n * Construct the props for an icon\n * specific to external links.\n * @param url\n */\nexport function useLinkIconProps(url: string) {\n\treturn useMemo(\n\t\t() => ({\n\t\t\tstyles: {\n\t\t\t\troot: {\n\t\t\t\t\tmarginLeft: 2,\n\t\t\t\t\tfontSize: '0.8em',\n\t\t\t\t\twidth: '0.8em',\n\t\t\t\t\theight: '0.8em',\n\t\t\t\t},\n\t\t\t},\n\t\t\ticonName: 'NavigateExternalInline',\n\t\t\t// we have to provide separate click handling for the icon\n\t\t\tonClick: () => window.open(url, '_blank'),\n\t\t}),\n\t\t[url],\n\t)\n}\n\n// We have to do a little housekeeping on the paths to navigate relative content\n// The content must use \".\" to separate paths in order to be JS-compliant,\n// we want to look for nested paths and align them with the parent\n// to ensure the entire structure remains intact as a key into the content index\nfunction parseRelativePath(path: string, parent: string) {\n\tconst relative = path.replace(window.location.origin, '').replace(/.md/, '')\n\tconst parts = relative.split('/')\n\tconst parentParts = parent.split(/\\./g)\n\n\t// sibling, push it into the same \"folder\"\n\tif (parts[0] === '.') {\n\t\treturn [\n\t\t\t...parentParts.slice(0, parentParts.length - 1),\n\t\t\t...parts.slice(1),\n\t\t].join('.')\n\t}\n\n\t// if it's nested deeper, slice out the correct number of levels\n\tconst levels = parts.filter((p) => p === '..').length\n\tif (levels > 0) {\n\t\treturn [\n\t\t\t...parentParts.slice(0, parentParts.length - (levels + 1)),\n\t\t\t...parts.slice(levels),\n\t\t].join('.')\n\t}\n\n\t// fallback for unaccounted for path structures\n\treturn relative.replace(/\\//g, '.')\n}\n\n/**\n * Relative paths should either include the origin or have no protocol.\n * @param url\n * @returns\n */\nexport function isExternalLink(url: string) {\n\tif (url.includes(':')) {\n\t\treturn !url.includes(window.location.origin)\n\t}\n\treturn false\n}\n"],"names":[],"sourceRoot":""}