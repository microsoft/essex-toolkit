{"version":3,"file":"hierarchy-browser-src-__tests__-HierarchyBrowser-stories.e3e52c04.iframe.bundle.js","mappings":";;AAwCA;AACA;;;;;;;AC0JA;;AAQA;;AAIA;;;;;AAMA;;;;;;;AAQA;;;;;AAMA;;;;;;AC9GA;;AASA;;;AAIA;;;;AAKA;;;;;;;;;;;;ACLA;;;;;;;ACkDA;;AAGA;;;;;;;AASA;;;;;;AAQA;ACpKA;;;ADyKA;;;;AAKA;;;AAIA;;;;;;AEzDA","sources":["webpack://essex-toolkit-stories/../hierarchy-browser/src/NeighborList/Bar.tsx","webpack://essex-toolkit-stories/../hierarchy-browser/src/NeighborList/CommunityEdgeList.tsx","webpack://essex-toolkit-stories/../hierarchy-browser/src/CommunityCard/CommunityTable.tsx","webpack://essex-toolkit-stories/../hierarchy-browser/src/CommunityCard/AdjacentCommunities/AdjacentCommunities.tsx","webpack://essex-toolkit-stories/../hierarchy-browser/src/CommunityCard/CommunityOverview.tsx","webpack://essex-toolkit-stories/../hierarchy-browser/src/common/styles/styles.ts","webpack://essex-toolkit-stories/../hierarchy-browser/src/CommunityCard/CommunityCard.tsx"],"sourcesContent":["/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { ScaleLinear } from 'd3-scale'\nimport { memo, useMemo } from 'react'\nimport styled from 'styled-components'\n\ninterface ICellComponentProps {\n\tvalue: number\n\tscale: ScaleLinear<number, number>\n\tcolor: string\n\theight: number | string\n\twidth: number\n}\nexport const Bar: React.FC<ICellComponentProps> = memo(function Bar({\n\tvalue,\n\tscale,\n\tcolor,\n\theight,\n\twidth,\n}: ICellComponentProps) {\n\tconst size = useMemo(() => scale(value), [scale, value])\n\treturn (\n\t\t<>\n\t\t\t<SvgElement width={width} height={height}>\n\t\t\t\t<rect\n\t\t\t\t\twidth={size || 10}\n\t\t\t\t\theight={height}\n\t\t\t\t\tx={width - (size || 0)}\n\t\t\t\t\tfill={color}\n\t\t\t\t\trx={1}\n\t\t\t\t\topacity={0.5}\n\t\t\t\t/>\n\t\t\t</SvgElement>\n\t\t</>\n\t)\n})\n\nconst SvgElement = styled.svg<{ width: number; height: number | string }>`\n\twidth: ${({ width }) => width};\n\theight: ${({ height }) => height};\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { useDimensions } from '@essex/hooks'\nimport { Text } from '@fluentui/react'\nimport { useThematic } from '@thematic/react'\nimport { memo, useCallback, useRef } from 'react'\nimport styled from 'styled-components'\n\nimport { textStyle } from '../common/styles/index.js'\nimport { useTableStyles } from '../hooks/useStyles.js'\nimport type { INeighborCommunityDetail, ITableSettings } from '../index.js'\nimport { Bar } from './Bar.js'\nimport { useRowElements } from './hooks/useRowsElements.js'\nimport { useSortedNeighbors } from './hooks/useSortedNeighbors.js'\n\nconst SUBHEADERS = ['community', 'connections', 'members']\n\nexport interface ICommunityEdgeListProps {\n\tedges?: INeighborCommunityDetail[]\n\tonEdgeClick: (edge?: INeighborCommunityDetail) => void\n\tclearCurrentSelection: () => Promise<void>\n\tselectedEdge?: INeighborCommunityDetail\n\tisOpen: boolean\n\tstyles?: ITableSettings\n}\nconst CommunityEdgeList: React.FC<ICommunityEdgeListProps> = memo(\n\tfunction CommunityEdgeList({\n\t\tedges,\n\t\tselectedEdge,\n\t\tonEdgeClick,\n\t\tclearCurrentSelection,\n\t\tstyles,\n\t}: ICommunityEdgeListProps) {\n\t\tconst [\n\t\t\theaderVariant,\n\t\t\tsubheaderVariant,\n\t\t\theaderStyle,\n\t\t\tsubheaderStyle,\n\t\t\trootStyle,\n\t\t\titemStyle,\n\t\t\titemVariant,\n\t\t] = useTableStyles(styles)\n\n\t\tconst theme = useThematic()\n\t\tconst handleEdgeClick = useCallback(\n\t\t\t(edge?: INeighborCommunityDetail) => {\n\t\t\t\tvoid clearCurrentSelection().then(() => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tedge &&\n\t\t\t\t\t\tselectedEdge &&\n\t\t\t\t\t\tedge.communityId === selectedEdge.communityId\n\t\t\t\t\t) {\n\t\t\t\t\t\tonEdgeClick(undefined)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tonEdgeClick(edge)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t},\n\t\t\t[onEdgeClick, selectedEdge, clearCurrentSelection],\n\t\t)\n\t\tconst sortedEdges = useSortedNeighbors(edges)\n\t\tconst ref = useRef(null)\n\t\tconst connRef = useRef(null)\n\t\tconst memberDimensions = useDimensions(ref)\n\t\tconst connectionDimensions = useDimensions(connRef)\n\t\tconst [getBackgroundStyle, barColor, connScale, sizeScale] = useRowElements(\n\t\t\ttheme,\n\t\t\tselectedEdge,\n\t\t\tedges,\n\t\t\tmemberDimensions,\n\t\t)\n\n\t\treturn sortedEdges ? (\n\t\t\t<Table className={'tableItems-root'} style={rootStyle}>\n\t\t\t\t<TableHead>\n\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t<TableHeader\n\t\t\t\t\t\t\tcolSpan={3}\n\t\t\t\t\t\t\tclassName={'tableItems-header'}\n\t\t\t\t\t\t\tstyle={headerStyle}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Text variant={headerVariant}>\n\t\t\t\t\t\t\t\t<Bold>Neighboring Communities</Bold>\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t</TableHeader>\n\t\t\t\t\t</TableRow>\n\t\t\t\t</TableHead>\n\t\t\t\t<TableBody>\n\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t{SUBHEADERS.map((header, index) => (\n\t\t\t\t\t\t\t<TableHeader\n\t\t\t\t\t\t\t\tkey={`subheader-${index}`}\n\t\t\t\t\t\t\t\tclassName={'tableItems-subheader'}\n\t\t\t\t\t\t\t\tstyle={subheaderStyle}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Text variant={subheaderVariant} styles={textStyle}>\n\t\t\t\t\t\t\t\t\t<Bold>{header}</Bold>\n\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t</TableHeader>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</TableRow>\n\t\t\t\t\t{sortedEdges.map((edge, i) => {\n\t\t\t\t\t\tconst onEdgeClick = () => handleEdgeClick(edge)\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<TableRow key={`edge-${i}`}>\n\t\t\t\t\t\t\t\t<TableCell\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t...getBackgroundStyle(edge, i),\n\t\t\t\t\t\t\t\t\t\ttextAlign: 'center',\n\t\t\t\t\t\t\t\t\t\t...itemStyle,\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tonClick={onEdgeClick}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<TableMaxHeight>\n\t\t\t\t\t\t\t\t\t\t<Text variant={itemVariant} styles={textStyle}>\n\t\t\t\t\t\t\t\t\t\t\t{edge.communityId}\n\t\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t\t</TableMaxHeight>\n\t\t\t\t\t\t\t\t</TableCell>\n\n\t\t\t\t\t\t\t\t<TableCell\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t...itemStyle,\n\t\t\t\t\t\t\t\t\t\t...getBackgroundStyle(edge, i),\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tkey={`neighbor-community-${0}`}\n\t\t\t\t\t\t\t\t\tonClick={onEdgeClick}\n\t\t\t\t\t\t\t\t\tref={connRef}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<TableMaxHeight>\n\t\t\t\t\t\t\t\t\t\t<AbsoluteDiv>\n\t\t\t\t\t\t\t\t\t\t\t<TextContainer>\n\t\t\t\t\t\t\t\t\t\t\t\t<Text variant={itemVariant} styles={textStyle}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{edge.connections}\n\t\t\t\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t\t\t\t</TextContainer>\n\t\t\t\t\t\t\t\t\t\t\t{connectionDimensions?.width ? (\n\t\t\t\t\t\t\t\t\t\t\t\t<Bar\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={edge.connections}\n\t\t\t\t\t\t\t\t\t\t\t\t\twidth={connectionDimensions.width}\n\t\t\t\t\t\t\t\t\t\t\t\t\theight={connectionDimensions?.height || 15}\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor={barColor}\n\t\t\t\t\t\t\t\t\t\t\t\t\tscale={connScale}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t\t\t\t</AbsoluteDiv>\n\t\t\t\t\t\t\t\t\t</TableMaxHeight>\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t<TableCell\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t...itemStyle,\n\t\t\t\t\t\t\t\t\t\t...getBackgroundStyle(edge, i),\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tkey={`neighbor-community-${1}`}\n\t\t\t\t\t\t\t\t\tonClick={onEdgeClick}\n\t\t\t\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<TableMaxHeight>\n\t\t\t\t\t\t\t\t\t\t<AbsoluteDiv>\n\t\t\t\t\t\t\t\t\t\t\t<TextContainer>\n\t\t\t\t\t\t\t\t\t\t\t\t<Text variant={itemVariant} styles={textStyle}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{edge.size}\n\t\t\t\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t\t\t\t</TextContainer>\n\n\t\t\t\t\t\t\t\t\t\t\t{memberDimensions?.width ? (\n\t\t\t\t\t\t\t\t\t\t\t\t<Bar\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={edge.size}\n\t\t\t\t\t\t\t\t\t\t\t\t\twidth={memberDimensions.width}\n\t\t\t\t\t\t\t\t\t\t\t\t\theight={memberDimensions?.height || 15}\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor={barColor}\n\t\t\t\t\t\t\t\t\t\t\t\t\tscale={sizeScale}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t\t\t\t</AbsoluteDiv>\n\t\t\t\t\t\t\t\t\t</TableMaxHeight>\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</TableBody>\n\t\t\t</Table>\n\t\t) : null\n\t},\n)\nCommunityEdgeList.displayName = 'CommunityEdgeList'\n\nexport default CommunityEdgeList\n\nconst Table = styled.table`\n\twidth: 100%;\n\tborder-collapse: collapse;\n`\nconst TableHead = styled.thead``\n\nconst TableRow = styled.tr``\nconst TableBody = styled.tbody``\n\nconst TableMaxHeight = styled.div`\n\theight: 15px;\n`\nconst Bold = styled.div`\n\tfont-weight: bold;\n`\n\nconst TableHeader = styled.td`\n\tfont-weight: bold;\n\twidth: 1px;\n\twhite-space: nowrap;\n\ttext-align: center;\n`\nconst TableCell = styled.td`\n\twhite-space: nowrap;\n\twidth: 1px;\n\tcursor: pointer;\n\ttext-align: end;\n\tposition: relative;\n\tmin-height: 10px;\n`\nconst TextContainer = styled.div`\n\tz-index: 2;\n\ttop: 0px;\n\tright: 5px;\n\tposition: absolute;\n`\nconst AbsoluteDiv = styled.div`\n\ttop: 0;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { Text } from '@fluentui/react'\nimport { memo, useCallback, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport { EntityItem } from '../EntityItem/EntityItem.js'\nimport { textStyle } from '../common/styles/index.js'\nimport { useTableStyles } from '../hooks/useStyles.js'\nimport type {\n\tCommunityId,\n\tEntityId,\n\tIEntityDetail,\n\tITableSettings,\n} from '../types/index.js'\n\nexport interface ICommunityTableProps {\n\tentities: IEntityDetail[]\n\tstyles?: ITableSettings\n\tcommunityId?: CommunityId\n\tvisibleColumns?: string[]\n\tminimize?: boolean\n\tselections?: EntityId[]\n\tonSelectionChange: (id: EntityId) => void\n}\n\nexport const CommunityTable: React.FC<ICommunityTableProps> = memo(\n\tfunction CommunityTable({\n\t\tentities,\n\t\tminimize,\n\t\tstyles,\n\t\tcommunityId,\n\t\tvisibleColumns,\n\t\tselections,\n\t\tonSelectionChange,\n\t}: ICommunityTableProps) {\n\t\tconst isSelected = useCallback(\n\t\t\t(entity: IEntityDetail): boolean | undefined =>\n\t\t\t\tselections?.includes(entity.id),\n\t\t\t[selections],\n\t\t)\n\t\tconst attrKeys: string[] = useMemo(() => {\n\t\t\tif (visibleColumns) {\n\t\t\t\treturn visibleColumns\n\t\t\t}\n\t\t\tif (minimize || !entities[0].attrs) {\n\t\t\t\treturn []\n\t\t\t}\n\t\t\treturn Object.keys(entities[0].attrs)\n\t\t}, [entities, minimize, visibleColumns])\n\n\t\tconst [\n\t\t\theaderVariant,\n\t\t\tsubheaderVariant,\n\t\t\theaderStyle,\n\t\t\tsubheaderStyle,\n\t\t\trootStyle,\n\t\t] = useTableStyles(styles)\n\t\tconst headerText = communityId\n\t\t\t? `${communityId} Community Membership`\n\t\t\t: 'Community Membership'\n\t\treturn (\n\t\t\t<Table className={'tableItems-root'} style={rootStyle}>\n\t\t\t\t<TableHeader>\n\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t<TableHeaderRow\n\t\t\t\t\t\t\tcolSpan={attrKeys.length + 1}\n\t\t\t\t\t\t\tclassName={'tableItems-header'}\n\t\t\t\t\t\t\tstyle={headerStyle}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Text variant={headerVariant}>\n\t\t\t\t\t\t\t\t<Bold>{headerText}</Bold>\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t</TableHeaderRow>\n\t\t\t\t\t</TableRow>\n\t\t\t\t</TableHeader>\n\t\t\t\t<THeader>\n\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t{['id', ...attrKeys].map((key, i) => (\n\t\t\t\t\t\t\t<HeaderCell\n\t\t\t\t\t\t\t\tkey={`table-header-${i}`}\n\t\t\t\t\t\t\t\tclassName={'tableItems-subheader'}\n\t\t\t\t\t\t\t\tstyle={subheaderStyle}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Text variant={subheaderVariant} styles={textStyle}>\n\t\t\t\t\t\t\t\t\t<Bold>{key}</Bold>\n\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t</HeaderCell>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</TableRow>\n\t\t\t\t</THeader>\n\t\t\t\t<TableBody>\n\t\t\t\t\t{entities.map((entity, i) => (\n\t\t\t\t\t\t<EntityItem\n\t\t\t\t\t\t\tkey={`entity_${i}`}\n\t\t\t\t\t\t\titem={entity}\n\t\t\t\t\t\t\tattrs={attrKeys}\n\t\t\t\t\t\t\tindex={i}\n\t\t\t\t\t\t\tstyles={styles}\n\t\t\t\t\t\t\tselected={isSelected(entity)}\n\t\t\t\t\t\t\tonEntityClick={onSelectionChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</TableBody>\n\t\t\t</Table>\n\t\t)\n\t},\n)\n\nCommunityTable.displayName = 'CommunityTableProps'\n\nconst THeader = styled.thead`\n\tfont-weight: bold;\n`\n\nconst TableRow = styled.tr``\n\nconst TableHeader = styled.thead``\n\nconst TableBody = styled.tbody``\nconst Bold = styled.div`\n\tfont-weight: bold;\n`\n\nconst Table = styled.table`\n\twidth: 100%;\n\tborder-collapse: collapse;\n`\nconst HeaderCell = styled.th`\n\twidth: 16%;\n\twidth: 1px;\n\twhite-space: nowrap;\n`\nconst TableHeaderRow = styled.th`\n\tfont-weight: bold;\n\twidth: 1px;\n\twhite-space: nowrap;\n\ttext-align: center;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { Spinner } from '@fluentui/react'\nimport styled from 'styled-components'\n\nimport CommunityEdgeList from '../../NeighborList/CommunityEdgeList.js'\nimport { ScrollArea } from '../../ScollArea/index.js'\nimport type { CommunityDataProvider } from '../../common/dataProviders/index.js'\nimport { useThemesAccentStyle } from '../../hooks/theme.js'\nimport type { EntityId, ITableSettings } from '../../types/index.js'\nimport { CommunityTable } from '../CommunityTable.js'\nimport { TableExpander } from '../TableExpander.js'\nimport { useAdjacentCommunityData } from './hooks/useAdjacentCommunityData.js'\nimport { useEdgeSelection } from './hooks/useEdgeSelection.js'\nimport { useExpandedPanel } from './hooks/useExpandedPanel.js'\n\nconst ENTITY_LOADER_MSG = 'Fetching entity data...'\n\ninterface IAdajacentCommunities {\n\tdataProvider: CommunityDataProvider\n\tisOpen: boolean\n\tstyles?: ITableSettings\n\tvisibleColumns: string[] | undefined\n\tminimizeColumns: boolean | undefined\n\trefresh: boolean\n\tselections?: EntityId[]\n\tonSelectionChange: (id: EntityId) => void\n}\n\nexport const AdjacentCommunities: React.FC<IAdajacentCommunities> =\n\tfunction AdjacentCommunities({\n\t\tdataProvider,\n\t\tisOpen,\n\t\tstyles,\n\t\tvisibleColumns,\n\t\tminimizeColumns,\n\t\trefresh,\n\t\tselections,\n\t\tonSelectionChange,\n\t}: IAdajacentCommunities) {\n\t\tconst colorStyle = useThemesAccentStyle(isOpen)\n\n\t\tconst {\n\t\t\tedgeContentStyle,\n\t\t\tedgeEntitiesContentStyle,\n\t\t\tedgeEntitiesExpanderClick,\n\t\t\tedgeExpanderClick,\n\t\t\tedgeListOpen,\n\t\t\tedgeEntitiesOpen,\n\t\t} = useExpandedPanel({ isOpen })\n\n\t\tconst [\n\t\t\tsetEdgeSelection,\n\t\t\tloadMoreEntities,\n\t\t\tmoreEntitiesToLoad,\n\t\t\tedgeEntities,\n\t\t\tselectedCommunityEdge,\n\t\t\tclearCurrentSelection,\n\t\t] = useEdgeSelection(dataProvider)\n\t\tconst [adjacentCommunities, isAdjacentEntitiesLoading] =\n\t\t\tuseAdjacentCommunityData(dataProvider, isOpen, refresh)\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{adjacentCommunities && adjacentCommunities.length > 0 ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Spacer style={colorStyle} className={'neighbor-expander-button'}>\n\t\t\t\t\t\t\t{isOpen ? (\n\t\t\t\t\t\t\t\t<TableExpander\n\t\t\t\t\t\t\t\t\tisOpen={edgeListOpen}\n\t\t\t\t\t\t\t\t\thandleButtonClick={edgeExpanderClick}\n\t\t\t\t\t\t\t\t\tstyles={styles?.neighborExpandButton}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t</Spacer>\n\t\t\t\t\t\t<Content style={edgeContentStyle}>\n\t\t\t\t\t\t\t<CommunityEdgeList\n\t\t\t\t\t\t\t\tedges={adjacentCommunities}\n\t\t\t\t\t\t\t\tselectedEdge={selectedCommunityEdge}\n\t\t\t\t\t\t\t\tonEdgeClick={setEdgeSelection}\n\t\t\t\t\t\t\t\tclearCurrentSelection={clearCurrentSelection}\n\t\t\t\t\t\t\t\tisOpen={edgeListOpen}\n\t\t\t\t\t\t\t\tstyles={styles}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Content>\n\t\t\t\t\t</>\n\t\t\t\t) : null}\n\t\t\t\t{isAdjacentEntitiesLoading || edgeEntities?.length > 0 ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Spacer style={colorStyle} className={'neighbor-expander-button'}>\n\t\t\t\t\t\t\t{isOpen ? (\n\t\t\t\t\t\t\t\t<TableExpander\n\t\t\t\t\t\t\t\t\tisOpen={edgeEntitiesOpen}\n\t\t\t\t\t\t\t\t\thandleButtonClick={edgeEntitiesExpanderClick}\n\t\t\t\t\t\t\t\t\tstyles={styles?.neighborExpandButton}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t</Spacer>\n\t\t\t\t\t\t<Content style={edgeEntitiesContentStyle}>\n\t\t\t\t\t\t\t{edgeEntities?.length > 0 && edgeEntitiesOpen ? (\n\t\t\t\t\t\t\t\t<ScrollArea\n\t\t\t\t\t\t\t\t\tloadMore={loadMoreEntities}\n\t\t\t\t\t\t\t\t\thasMore={moreEntitiesToLoad}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<CommunityTable\n\t\t\t\t\t\t\t\t\t\tentities={edgeEntities}\n\t\t\t\t\t\t\t\t\t\tcommunityId={selectedCommunityEdge?.communityId}\n\t\t\t\t\t\t\t\t\t\tvisibleColumns={visibleColumns}\n\t\t\t\t\t\t\t\t\t\tstyles={styles}\n\t\t\t\t\t\t\t\t\t\tminimize={minimizeColumns}\n\t\t\t\t\t\t\t\t\t\tselections={selections}\n\t\t\t\t\t\t\t\t\t\tonSelectionChange={onSelectionChange}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</ScrollArea>\n\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t{isAdjacentEntitiesLoading ? (\n\t\t\t\t\t\t\t\t<Spinner label={ENTITY_LOADER_MSG} />\n\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t</Content>\n\t\t\t\t\t</>\n\t\t\t\t) : null}\n\t\t\t</>\n\t\t)\n\t}\nconst Content = styled.div`\n\toverflow-y: auto;\n\ttransition: height 0.2s;\n`\nconst Spacer = styled.div`\n\tborder-style: solid;\n\tborder-width: 0px 0.5px 0px 0.5px;\n\talign-self: center;\n\toverflow: hidden;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { IconButton, Spinner, Text, TooltipHost } from '@fluentui/react'\nimport { memo, useCallback } from 'react'\nimport styled from 'styled-components'\n\nimport { MagBar } from '../MagBar/index.js'\nimport { paddingLeft } from '../common/styles/index.js'\nimport type { IFilterProps } from '../hooks/interfaces.js'\nimport { useThemesStyle } from '../hooks/theme.js'\nimport {\n\tuseCommunityLevelText,\n\tuseCommunityText,\n} from '../hooks/useCommunityDetails.js'\nimport { useCommunityDownload } from '../hooks/useCommunityDownload.js'\nimport { useControls } from '../hooks/useControls.js'\nimport type { IEntityLoadParams } from '../hooks/useLoadMoreEntitiesHandler.js'\nimport { useOverviewStyles } from '../hooks/useStyles.js'\nimport type { CommunityId, IControls, IEntityDetail } from '../index.js'\nimport type { ICardOverviewSettings } from '../types/index.js'\n\nexport interface ICommunityOverviewProps {\n\tcommunityId: CommunityId\n\tsize: number\n\tsizePercent: number\n\tincrementLevel?: boolean // adjust from 0 to 1 based indexing on levels if needed\n\tonToggleOpen: () => void\n\tfilterProps: IFilterProps\n\tgetEntityCallback: (\n\t\tpageNumber?: number,\n\t\tparams?: IEntityLoadParams,\n\t) => Promise<IEntityDetail[]> | undefined\n\tlevel: number\n\tstyles?: ICardOverviewSettings\n\tcontrols?: IControls\n\tneighborSize?: number\n}\n\nconst DEFAULT_MAGBAR_WIDTH = 120\nconst SPINNER_STYLE = { marginLeft: 17 }\nexport const CommunityOverview: React.FC<ICommunityOverviewProps> = memo(\n\tfunction CommunityOverview({\n\t\tcommunityId,\n\t\tsize,\n\t\tsizePercent,\n\t\tincrementLevel,\n\t\tonToggleOpen,\n\t\tfilterProps,\n\t\tgetEntityCallback,\n\t\tlevel,\n\t\tstyles,\n\t\tcontrols,\n\t\tneighborSize,\n\t}: ICommunityOverviewProps) {\n\t\tconst levelLabel = useCommunityLevelText(level, incrementLevel)\n\n\t\tconst style = useThemesStyle(styles)\n\t\tconst [\n\t\t\theaderVariant,\n\t\t\tsubheaderVariant,\n\t\t\theaderStyle,\n\t\t\tsubheaderStyle,\n\t\t\tbuttonStyle,\n\t\t] = useOverviewStyles(styles)\n\n\t\tconst { showLevel, showMembership, showFilter, showExport } =\n\t\t\tuseControls(controls)\n\t\tconst communityText = useCommunityText(communityId)\n\n\t\tconst handleFilterChange = useCallback(\n\t\t\t(event: React.MouseEvent<HTMLButtonElement>) => {\n\t\t\t\tevent.stopPropagation()\n\t\t\t\tfilterProps.toggleFilter()\n\t\t\t},\n\t\t\t[filterProps],\n\t\t)\n\n\t\tconst [handleDownload, downloadInProgress] = useCommunityDownload(\n\t\t\tcommunityId,\n\t\t\tsize,\n\t\t\tgetEntityCallback,\n\t\t\tlevel,\n\t\t)\n\n\t\treturn (\n\t\t\t<FlexyContainer\n\t\t\t\tonClick={onToggleOpen}\n\t\t\t\tstyle={style}\n\t\t\t\tclassName={'cardoverview-root'}\n\t\t\t>\n\t\t\t\t<Grid>\n\t\t\t\t\t<GridItem1>\n\t\t\t\t\t\t<Divider className={'cardoverview-header'} style={headerStyle}>\n\t\t\t\t\t\t\t<Text variant={headerVariant}>\n\t\t\t\t\t\t\t\t<Bold>{communityText}</Bold>\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t</Divider>\n\t\t\t\t\t\t{showLevel ? (\n\t\t\t\t\t\t\t<Divider\n\t\t\t\t\t\t\t\tclassName={'cardoverview-subheader'}\n\t\t\t\t\t\t\t\tstyle={subheaderStyle}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Text variant={subheaderVariant}>{levelLabel}</Text>\n\t\t\t\t\t\t\t</Divider>\n\t\t\t\t\t\t) : null}\n\t\t\t\t\t</GridItem1>\n\t\t\t\t\t{neighborSize && neighborSize > 0 ? (\n\t\t\t\t\t\t<GridItem2>\n\t\t\t\t\t\t\t<TooltipHost content=\"Number of neighboring (connected) communities.  Members of neighboring communities may be related, but are less tightly connected that those within the community.\">\n\t\t\t\t\t\t\t\t<Divider\n\t\t\t\t\t\t\t\t\tclassName={'cardoverview-subheader'}\n\t\t\t\t\t\t\t\t\tstyle={subheaderStyle}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Text\n\t\t\t\t\t\t\t\t\t\tvariant={subheaderVariant}\n\t\t\t\t\t\t\t\t\t>{`Neighbors: ${neighborSize}`}</Text>\n\t\t\t\t\t\t\t\t</Divider>\n\t\t\t\t\t\t\t\t<HeightSpacer />\n\t\t\t\t\t\t\t</TooltipHost>\n\t\t\t\t\t\t</GridItem2>\n\t\t\t\t\t) : null}\n\t\t\t\t\t<GridItem3>\n\t\t\t\t\t\t<FlexySubContainer>\n\t\t\t\t\t\t\t{size && showMembership ? (\n\t\t\t\t\t\t\t\t<Divider>\n\t\t\t\t\t\t\t\t\t<Divider\n\t\t\t\t\t\t\t\t\t\tclassName={'cardoverview-subheader'}\n\t\t\t\t\t\t\t\t\t\tstyle={subheaderStyle}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Text variant={subheaderVariant}>\n\t\t\t\t\t\t\t\t\t\t\tMembers: {size.toLocaleString()}\n\t\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t\t</Divider>\n\t\t\t\t\t\t\t\t\t<MagBar percent={sizePercent} width={DEFAULT_MAGBAR_WIDTH} />\n\t\t\t\t\t\t\t\t</Divider>\n\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t{showFilter ? (\n\t\t\t\t\t\t\t\t<TooltipHost\n\t\t\t\t\t\t\t\t\tcontent={`Show only unique entities between level ${level} and ${\n\t\t\t\t\t\t\t\t\t\tlevel + 1\n\t\t\t\t\t\t\t\t\t}.`}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\t\t\tstyles={buttonStyle}\n\t\t\t\t\t\t\t\t\t\ticonProps={{\n\t\t\t\t\t\t\t\t\t\t\ticonName: filterProps.state ? 'Filter' : 'ClearFilter',\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tonClick={handleFilterChange}\n\t\t\t\t\t\t\t\t\t\tdisabled={filterProps.disabled}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</TooltipHost>\n\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t{showExport ? (\n\t\t\t\t\t\t\t\t<TooltipHost content=\"Download community as .csv file.\">\n\t\t\t\t\t\t\t\t\t{downloadInProgress ? (\n\t\t\t\t\t\t\t\t\t\t<Spinner label=\"\" style={SPINNER_STYLE} />\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\t\t\t\tstyles={buttonStyle}\n\t\t\t\t\t\t\t\t\t\t\ticonProps={{ iconName: 'DownloadDocument' }}\n\t\t\t\t\t\t\t\t\t\t\tonClick={handleDownload}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</TooltipHost>\n\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t</FlexySubContainer>\n\t\t\t\t\t</GridItem3>\n\t\t\t\t</Grid>\n\t\t\t</FlexyContainer>\n\t\t)\n\t},\n)\nconst Divider = styled.div``\n\nconst Bold = styled.div`\n\tfont-weight: bold;\n`\n\nconst FlexySubContainer = styled.div`\n\tdisplay: flex;\n`\nconst FlexyContainer = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n\tpadding: 6px;\n\tcursor: cell;\n\tborder-radius: 5px;\n`\n\nconst Grid = styled.div`\n\tdisplay: grid;\n\tgrid-template-columns: 1fr 1fr 1fr;\n\tgrid-column-gap: 8;\n\tgrid-row-gap: 1;\n\twidth: 100%;\n`\n\nconst GridItem1 = styled.div`\n\tmargin-left: ${paddingLeft};\n\tgrid-row: 1;\n\tgrid-column: 1;\n`\nconst GridItem2 = styled.div`\n\tgrid-row: 1;\n\tgrid-column: 2;\n\tjustify-self: center;\n`\nconst HeightSpacer = styled.div`\n\tvisibility: hidden;\n\theight: 10px;\n`\nconst GridItem3 = styled.div`\n\tgrid-row: 1;\n\tgrid-column: 3;\n\tjustify-self: end;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { ITextProps } from '@fluentui/react'\n\nconst tiny = 'tiny' as ITextProps['variant']\nconst xSmall = 'xSmall' as ITextProps['variant']\nconst small = 'small' as ITextProps['variant']\nconst smallPlus = 'smallPlus' as ITextProps['variant']\nconst medium = 'medium' as ITextProps['variant']\nconst mediumPlus = 'mediumPlus' as ITextProps['variant']\nconst large = 'large' as ITextProps['variant']\nconst xLarge = 'xLarge' as ITextProps['variant']\nconst xxLarge = 'xxLarge' as ITextProps['variant']\nconst mega = 'mega' as ITextProps['variant']\n\nexport const variants = {\n\ttiny,\n\txSmall,\n\tsmall,\n\tsmallPlus,\n\tmedium,\n\tmediumPlus,\n\tlarge,\n\txLarge,\n\txxLarge,\n\tmega,\n}\n\nexport const rowHeader = variants.large\nexport const rowSubHeader = variants.mediumPlus\nexport const headerLabel = variants.large\nexport const subHeaderLabel = variants.mediumPlus\n\nexport const tableItems = variants.medium\nexport const paddingLeft = 10\n\nexport const textStyle = { root: { marginLeft: paddingLeft } }\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { Spinner } from '@fluentui/react'\nimport { memo, useCallback, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport { EmptyEntityList } from '../EntityItem/EmptyEntityList.js'\nimport { ScrollArea } from '../ScollArea/index.js'\nimport type { CommunityDataProvider } from '../common/dataProviders/index.js'\nimport { useContainerStyle } from '../hooks/theme.js'\nimport { useCommunityData } from '../hooks/useCommunityData.js'\nimport { useCommunitySizePercent } from '../hooks/useCommunitySizePercent.js'\nimport { useUpdatedCommunityProvider } from '../hooks/useUpdatedCommunityProvider.js'\nimport type {\n\tEntityId,\n\tILoadNeighborCommunities,\n\tIOnSelectionChange,\n\tISettings,\n} from '../index.js'\nimport { AdjacentCommunities } from './AdjacentCommunities/index.js'\nimport { CommunityOverview } from './CommunityOverview.js'\nimport { CommunityTable } from './CommunityTable.js'\n\nexport interface ICommunityCardProps {\n\tmaxSize: number\n\tmaxLevel: number\n\tlevel: number\n\tincrementLevel?: boolean // adjust from 0 to 1 based indexing on levels if needed\n\tneighborCallback?: ILoadNeighborCommunities\n\tsettings: ISettings\n\tdataProvider: CommunityDataProvider\n\ttoggleUpdate: boolean\n\tselections?: EntityId[]\n\tonSelectionChange?: IOnSelectionChange\n}\n\nconst ENTITY_LOADER_MSG = 'Fetching entity data...'\n\nexport const CommunityCard: React.FC<ICommunityCardProps> = memo(\n\tfunction CommunityCard({\n\t\tmaxSize,\n\t\tmaxLevel,\n\t\tlevel,\n\t\tincrementLevel,\n\t\tneighborCallback,\n\t\tsettings,\n\t\tdataProvider,\n\t\ttoggleUpdate,\n\t\tselections,\n\t\tonSelectionChange,\n\t}: ICommunityCardProps) {\n\t\tconst {\n\t\t\tisOpen: isOpenProp,\n\t\t\tminimizeColumns,\n\t\t\tvisibleColumns,\n\t\t\tstyles,\n\t\t\tcontrols,\n\t\t} = settings\n\n\t\tuseUpdatedCommunityProvider(dataProvider, level, neighborCallback)\n\n\t\tconst [\n\t\t\tentities,\n\t\t\tisLoading,\n\t\t\tloadMore,\n\t\t\thasMore,\n\t\t\tisOpen,\n\t\t\ttoggleOpen,\n\t\t\tfilterProps,\n\t\t] = useCommunityData(dataProvider, isOpenProp, maxLevel)\n\n\t\tconst sizePercent = useCommunitySizePercent(dataProvider.size, maxSize)\n\t\tconst contentStyle = useContainerStyle(isOpen)\n\n\t\tconst loadingElement = useMemo(\n\t\t\t() => (isLoading ? <Spinner label={ENTITY_LOADER_MSG} /> : null),\n\t\t\t[isLoading],\n\t\t)\n\n\t\tconst handleEntityClick = useCallback(\n\t\t\t(entiyId: EntityId) => {\n\t\t\t\tif (onSelectionChange) {\n\t\t\t\t\tconst currentSelection = selections || []\n\t\t\t\t\tconst deduped = new Set(currentSelection)\n\t\t\t\t\tif (deduped.has(entiyId)) {\n\t\t\t\t\t\tdeduped.delete(entiyId)\n\t\t\t\t\t\tonSelectionChange(Array.from(deduped))\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdeduped.add(entiyId)\n\t\t\t\t\t\tonSelectionChange(Array.from(deduped))\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t[onSelectionChange, selections],\n\t\t)\n\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<CommunityOverview\n\t\t\t\t\tcommunityId={dataProvider.communityId}\n\t\t\t\t\tonToggleOpen={toggleOpen}\n\t\t\t\t\tincrementLevel={incrementLevel}\n\t\t\t\t\tsizePercent={sizePercent}\n\t\t\t\t\tfilterProps={filterProps}\n\t\t\t\t\tgetEntityCallback={loadMore}\n\t\t\t\t\tlevel={level}\n\t\t\t\t\tstyles={styles?.cardOverview}\n\t\t\t\t\tcontrols={controls}\n\t\t\t\t\tneighborSize={dataProvider.neighborSize}\n\t\t\t\t\tsize={dataProvider.size}\n\t\t\t\t/>\n\t\t\t\t<Flex>\n\t\t\t\t\t<Content style={contentStyle}>\n\t\t\t\t\t\t{entities?.length > 0 ? (\n\t\t\t\t\t\t\t<ScrollArea loadMore={loadMore} hasMore={hasMore}>\n\t\t\t\t\t\t\t\t<CommunityTable\n\t\t\t\t\t\t\t\t\tentities={entities}\n\t\t\t\t\t\t\t\t\tcommunityId={dataProvider.communityId}\n\t\t\t\t\t\t\t\t\tvisibleColumns={visibleColumns}\n\t\t\t\t\t\t\t\t\tstyles={styles?.table}\n\t\t\t\t\t\t\t\t\tminimize={minimizeColumns}\n\t\t\t\t\t\t\t\t\tselections={selections}\n\t\t\t\t\t\t\t\t\tonSelectionChange={handleEntityClick}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ScrollArea>\n\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t{loadingElement}\n\t\t\t\t\t\t<EmptyEntityList\n\t\t\t\t\t\t\tfilterProps={filterProps}\n\t\t\t\t\t\t\tentities={entities}\n\t\t\t\t\t\t\tisLoading={isLoading}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Content>\n\t\t\t\t\t<AdjacentCommunities\n\t\t\t\t\t\tdataProvider={dataProvider}\n\t\t\t\t\t\tisOpen={isOpen}\n\t\t\t\t\t\tstyles={styles?.table}\n\t\t\t\t\t\tvisibleColumns={visibleColumns}\n\t\t\t\t\t\tminimizeColumns={minimizeColumns}\n\t\t\t\t\t\trefresh={toggleUpdate}\n\t\t\t\t\t\tselections={selections}\n\t\t\t\t\t\tonSelectionChange={handleEntityClick}\n\t\t\t\t\t/>\n\t\t\t\t</Flex>\n\t\t\t</Container>\n\t\t)\n\t},\n)\n\nconst Container = styled.div``\n\nconst Flex = styled.div`\n\tdisplay: flex;\n`\n\nconst Content = styled.div`\n\toverflow-y: auto;\n\ttransition: height 0.2s;\n`\n"],"names":[],"sourceRoot":""}